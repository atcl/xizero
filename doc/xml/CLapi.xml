<?xml version="1.0"?>

<?xml-stylesheet href="CLstyle.xsl" type="text/xsl" ?>

<class static="1">
	
	<filename>CLapi.hh</filename>
	
	<depends>
		<module href="CLtypes.xml">CLtypes.hh</module>
		<module href="CLstruct.xml">CLstruct.hh</module>
	</depends>
	
	<method ispublic="1">
		<name>exit</name>
		<returntype>void</returntype>
		<parameter>xlong r</parameter>
		<parameter>void(*e)()</parameter>
		<parameter>const xchar* f</parameter>
		<parameter>const xchar* m</parameter>
		<infotext>
		calls e(), prints f + ":" + m, and exits with status r.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>exit</name>
		<returntype>void</returntype>
		<parameter>xlong r</parameter>
		<parameter>void(*e)()</parameter>
		<parameter>const xchar* f</parameter>
		<parameter>const xchar* m</parameter>
		<parameter>const xchar* d</parameter>
		<infotext>
		calls e(), prints f + ":" + m + " " + d, and exits with status r.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>exit</name>
		<returntype>void</returntype>
		<parameter>xlong r</parameter>
		<parameter>void(*e)()</parameter>
		<parameter>const xchar* f</parameter>
		<parameter>const xchar* m</parameter>
		<parameter>xlong d</parameter>
		<infotext>
		calls e(), prints f + ":" + m + " " + d, and exits with status r.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>getfile</name>
		<returntype>CLfile*</returntype>
		<parameter>const xchar* fn</parameter>
		<parameter>bool s</parameter>
		<infotext>
		Opens and loads the (path+)file fn into a CLfile structure and returns a pointer onto it.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>getcsvfile</name>
		<returntype>xchar**</returntype>
		<parameter>const char* fn</parameter>
		<infotext>
		Opens and loads a comma-seperated-values file and returns a pointer onto a xchar array.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>print</name>
		<returntype>void</returntype>
		<parameter>const xchar* c</parameter>
		<parameter>bool i</parameter>
		<infotext>
		Prints the xchar pointer c to the console, the bool i controls wether a line end is set at the end.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>print</name>
		<returntype>void</returntype>
		<parameter>const xlong l</parameter>
		<parameter>bool i</parameter>
		<infotext>
		Prints the value l to the console, the bool i controls wether a line end is set at the end.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>waitforkey</name>
		<returntype>void</returntype>
		<infotext>
		Waits for a key input.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>wait</name>
		<returntype>void</returntype>
		<parameter>xlong m</parameter>
		<infotext>
		Waits m milliseconds.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>getmilliseconds</name>
		<returntype>xlong</returntype>
		<infotext>
		Returns the number of milliseconds passed since midnight.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>doevery</name>
		<returntype>xlong</returntype>
		<parameter>every* e</parameter>
		<infotext>
		Calls the procedure defined in the every structure in the nterval defined in the every structure.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>system</name>
		<returntype>xlong</returntype>
		<parameter>const xchar* c</parameter>
		<infotext>
		Makes a system call c. returns its return state.
		</infotext>
		<example>
		
		</example>
	</method>
	
	<method ispublic="1">
		<name>installsystemkey</name>
		<returntype>void</returntype>
		<parameter>xchar s</parameter>
		<parameter>void *a</parameter>
		<infotext>
		Installs a key, by scancode s, and connects the action a to it, which is called every time the key is pressed.
		</infotext>
		<example>
		
		</example>
	</method>
	
</class>

