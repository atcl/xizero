<?xml version="1.0" encoding="utf-8" ?>

<?xml-stylesheet href="CLstyle.xsl" type="text/xsl" ?>

<class static="0" istemplate="1">
	
	<filename>CLbase.hh</filename>
	
	<name>CLbase</name>
	
	<info>This class is a universal base class</info>
	
	<template>
		<parameter type="class">T</parameter>
		<parameter type="bool">S</parameter>
	</template>
	
	<depends>
		<module href="CLtypes.xml">CLtypes</module>
		<module href="CLversion.xml">CLversion</module>
	</depends>
	
	<attribute ispublic="0" isstatic="1">
		<name>base</name>
		<type>T*</type>
		<info>contains the instance of itself</info>
	</attribute>

	<attribute ispublic="0" isstatic="1">
		<name>version</name>
		<type>uxlong</type>
		<info>contains the version of the API</info>
	</attribute>
	
	<method ispublic="0" isstatic="0">
		<name>CLbase</name>
		<returns>void</returns>
		<parameter>const CLbase&amp;</parameter>
		<info>copy constructor</info>
		<example></example>
	</method>
	
	<method ispublic="0" isstatic="0">
		<name>CLbase</name>
		<returns>void</returns>
		<info>constructor</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>~CLbase</name>
		<returns>void</returns>
		<info>virtual destructor</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="1">
		<name>instance</name>
		<returns>T*</returns>
		<info>returns the instance of itself if tself is singleton ( S = 1 ) else returns zero</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="1">
		<name>getversion</name>
		<returns>uxlong</returns>
		<info>returns the API version</info>
		<example></example>
	</method>
	
</class>
