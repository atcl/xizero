<?xml version="1.0" encoding="utf-8" ?>

<?xml-stylesheet href="CLstyle.xsl" type="text/xsl" ?>

<class static="0" istemplate="0">
	
	<filename>CLpolygon.hh</filename>
	
	<name>CLpolygon</name>
	
	<info></info>
	
	<depends>
		<module href="CLmath.xml">CLmath</module>
		<module href="CLscreen.xml">CLscreen</module>
	</depends>
	
	<derived>
		<parent href="CLbase.xml">CLbase</parent>	
	</derived>
	
	<attribute ispublic="0" isstatic="1">
		<name>pointcount</name>
		<type>xlong</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="1">
		<name>shadezscale</name>
		<type>float</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="1">
		<name>vpoint</name>
		<type>CLfvector*</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="1">
		<name>wpoint</name>
		<type>CLfvector*</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="1">
		<name>leftside</name>
		<type>screenside*</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="1">
		<name>rightside</name>
		<type>screenside*</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>color</name>
		<type>uxlong</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>rcolor</name>
		<type>uxlong</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>scolor</name>
		<type>uxlong</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>shade</name>
		<type>uxlong</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>cpointcount</name>
		<type>xlong</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>pointr</name>
		<type>CLfvector*[4]</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>points</name>
		<type>CLfvector*[4]</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>pointt</name>
		<type>CLfvector*[4]</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>normal</name>
		<type>CLfvector</type>
		<info></info>
	</attribute>

	<attribute ispublic="0" isstatic="0">
		<name>rnormal</name>
		<type>CLfvector</type>
		<info></info>
	</attribute>
	
	<method ispublic="0" isstatic="0">
		<name>polyline</name>
		<returns>void</returns>
		<parameter>xlong x1</parameter>
		<parameter>xlong y1</parameter>
		<parameter>xlong x2</parameter>
		<parameter>xlong y2</parameter>
		<parameter>uxlong c</parameter>
		<qualifier>const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>getzplanecoords</name>
		<returns>clvector</returns>
		<parameter>const clvector&amp; a</parameter>
		<parameter>const clvector&amp; b</parameter>
		<parameter>float pz</parameter>
		<qualifier>template&lt;class clvector&gt;,inline,const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>getxplanecoords</name>
		<returns>clvector</returns>
		<parameter>const clvector&amp; a</parameter>
		<parameter>const clvector&amp; b</parameter>
		<parameter>float px</parameter>
		<qualifier>template&lt;class clvector&gt;,inline,const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>getyplanecoords</name>
		<returns>clvector</returns>
		<parameter>const clvector&amp; a</parameter>
		<parameter>const clvector&amp; b</parameter>
		<parameter>float py</parameter>
		<qualifier>template&lt;class clvector&gt;,inline,const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>zclipping</name>
		<returns>void</returns>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>project</name>
		<returns>void</returns>
		<parameter>xlong px=0</parameter>
		<parameter>xlong py=0</parameter>
		<parameter>bool c</parameter>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>xyclipping</name>
		<returns>void</returns>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>visible</name>
		<returns>bool</returns>
		<qualifier>const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>shape</name>
		<returns>void</returns>
		<qualifier>const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>flatshade</name>
		<returns>void</returns>
		<parameter>float pz</parameter>
		<parameter>bool ambient</parameter>
		<parameter>bool zlight</parameter>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>setside</name>
		<returns>void</returns>
		<parameter>const clvector&amp; b</parameter>
		<parameter>const clvector&amp; e</parameter>
		<parameter>screenside *s</parameter>
		<qualifier>template&lt;class clvector&gt;,const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>rasterize</name>
		<returns>void</returns>
		<parameter>xlong shadow</parameter>
		<parameter>CLfbuffer* t=0</parameter>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>circleinc</name>
		<returns>xlong</returns>
		<parameter>xlong x</parameter>
		<parameter>xlong pc</parameter>
		<qualifier>inline,const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="0" isstatic="0">
		<name>circledec</name>
		<returns>xlong</returns>
		<parameter>xlong x</parameter>
		<parameter>xlong pc</parameter>
		<qualifier>inline,const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>CLpolygon</name>
		<parameter>const CLlvector&amp; a</parameter>
		<parameter>const CLlvector&amp; b</parameter>
		<parameter>const CLlvector&amp; c</parameter>
		<parameter>const CLlvector&amp; d</parameter>
		<parameter>uxlong co</parameter>
		<parameter>uxlong sc</parameter>
		<info>Constructor</info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>~CLpolygon</name>
		<info>Destructor</info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>update</name>
		<returns>void</returns>
		<parameter>CLmatrix* m</parameter>
		<parameter>bool i=0</parameter>
		<info></info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>partupdate</name>
		<returns>void</returns>
		<parameter>CLmatrix* m</parameter>
		<info></info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>display</name>
		<returns>void</returns>
		<parameter>const CLlvector&amp; p</parameter>
		<parameter>xshort flags</parameter>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>display</name>
		<returns>void</returns>
		<parameter>const CLlvector&amp; p</parameter>
		<parameter>screenside* l</parameter>
		<parameter>screenside* r</parameter>
		<parameter>CLfbuffer* b</parameter>
		<parameter>xlong h</parameter>
		<qualifier></qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>add</name>
		<returns>void</returns>
		<parameter>const clvector&amp; a</parameter>
		<qualifier>template&lt;class clvector&gt;</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>reset</name>
		<returns>void</returns>
		<info></info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>setcolor</name>
		<returns>void</returns>
		<parameter>uxlong co</parameter>
		<info></info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>resetcolor</name>
		<returns>void</returns>
		<info></info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>getnormal</name>
		<returns>CLfvector</returns>
		<qualifier>const</qualifier>
		<info></info>
		<example></example>
	</method>

	<method ispublic="1" isstatic="0">
		<name>isinside</name>
		<returns>bool</returns>
		<parameter>CLfvector* p</parameter>>
		<qualifier>const</qualifier>
		<info></info>
		<example></example>
	</method>
	
</class>
