<?xml version="1.0" encoding="utf-8" ?>

<?xml-stylesheet href="CLstyle.xsl" type="text/xsl" ?>

<class static="1" istemplate="0">
	
	<filename>CLstring.hh</filename>
	
	<name>CLstring</name>
	
	<info></info>
	
	<depends>
		<module href="CLtypes.hh">CLtypes</module>
		<module href="CLbase.hh">CLbase</module>
	</depends>
	
	<derived>
		<parent href="CLbase.hh">CLbase</parent>	
	</derived>
	
	<method ispublic="0" isstatic="0">
		<name>CLstring</name>
		<returns>void</returns>
		<info>constructor</info>
		<example></example>
	</method>
	
	<method ispublic="0" isstatic="0">
		<name>~CLstring</name>
		<returns>void</returns>
		<info>destructor</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>copy</name>
		<returns>xchar*</returns>
		<parameter>const xchar* s</parameter>
		<parameter>xlong l (=0)</parameter>
		<info>duplicates s, with length l, if l equals zero, as by default, the whole string will be duplicated.</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>concat</name>
		<returns>xchar*</returns>
		<parameter>const xchar* a</parameter>
		<parameter>const xchar* b</parameter>
		<info>returns a new string which holds string a and string b.</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>length</name>
		<returns>xlong</returns>
		<parameter>const xchar*</parameter>
		<info>returns the length of a string.</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>compare</name>
		<returns>xlong</returns>
		<parameter>const xchar* s</parameter>
		<parameter>const xchar* t</parameter>
		<parameter>uxlong n (=0)</parameter>
		<info>Compares the first n characters of string s with string t returns a value unequal to zero if the strings are equal.</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>tolong</name>
		<returns>xlong</returns>
		<parameter>const xchar* s</parameter>
		<info>converts a string to a long signed integer.</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>toascii</name>
		<returns>xchar*</returns>
		<parameter>xlong v</parameter>
		<info>converts a long signed integer to a string.</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>linecount</name>
		<returns>xlong</returns>
		<parameter>const xchar* s</parameter>
		<info>Counts the lineend characters in a string.</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>find</name>
		<returns>xlong</returns>
		<parameter>const xchar* s</parameter>
		<parameter>const xchar* f</parameter>
		<parameter>xlong p (=0)</parameter>
		<info>Checks if from position p in string s if it contains string t, and returns the the starting position, if not -1.</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>hex</name>
		<returns>uxlong</returns>
		<parameter>const xchar* s</parameter>
		<info>Converts a string holding a hexadecimal number to a long unsigned integer.</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>linecount</name>
		<returns>xlong</returns>
		<parameter>CLfile* s</parameter>
		<info>Counts the lineend characters in a file image</info>
		<example></example>
	</method>
	
	<method ispublic="1" isstatic="0">
		<name>find</name>
		<returns>xlong</returns>
		<parameter>const xchar* s</parameter>
		<parameter>const xchar* f</parameter>
		<parameter>xlong p (=0)</parameter>
		<info>Checks if from position p in file image s if it contains string t, and returns the the starting position, if not -1.</info>
		<example></example>
	</method>
	
</class>
